alias returnValue R0;
alias functionNum R1;
alias currentPID R2;
alias _processTableEntry R10;
alias _i R11;
if(functionNum == ACQUIRE_TERMINAL)
then
    _processTableEntry = PROCESS_TABLE + currentPID*16;

    while([TERMINAL_STATUS_TABLE+0] == 1)
    do
        [_processTableEntry + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        call CONTEXT_SWITCH;
        multipop(R1, R2);
    endwhile;

    [TERMINAL_STATUS_TABLE+0] = 1;
    [TERMINAL_STATUS_TABLE+1] = currentPID;

    return;
endif;

if(functionNum == RELEASE_TERMINAL)
then
    if([TERMINAL_STATUS_TABLE+1] != currentPID)
    then
        returnValue = -1;
        return;
    endif;

    [TERMINAL_STATUS_TABLE+0] = 0;
    returnValue = 0;

    _i = 1;
    while(_i < MAX_PROC_NUM)
    do
        _processTableEntry = PROCESS_TABLE + _i*16;
        if([_processTableEntry+4] == WAIT_TERMINAL)
        then
            [_processTableEntry+4] = READY;
        endif;
        _i = _i+1;
    endwhile;

    return;
endif;

if(functionNum == ACQUIRE_DISK)
then
    _processTableEntry = PROCESS_TABLE + currentPID*16;

    while([DISK_STATUS_TABLE+0] == 1)
    do
        [_processTableEntry + 4] = WAIT_DISK;
        multipush(R1, R2);
        call CONTEXT_SWITCH;
        multipop(R1, R2);
    endwhile;

    [DISK_STATUS_TABLE+0] = 1;
    [DISK_STATUS_TABLE+4] = currentPID;

    return;
endif;

return;





