define MEM_FREE_COUNT 2;
define WAIT_MEM_COUNT 3;

alias returnValue R0;
alias functionNum R1;
alias arg1 R2;

if(functionNum == GET_FREE_PAGE)
then
    alias PID R11;
    alias processTableEntry R12;
    alias i R13;

    PID = [SYSTEM_STATUS_TABLE+1];
    processTableEntry = PROCESS_TABLE+PID*16;

    [SYSTEM_STATUS_TABLE+WAIT_MEM_COUNT] = [SYSTEM_STATUS_TABLE+WAIT_MEM_COUNT] + 1;

    while([SYSTEM_STATUS_TABLE+MEM_FREE_COUNT] == 0)
    do
        [processTableEntry+4] = WAIT_MEM;
        call CONTEXT_SWITCH;
    endwhile;

    [SYSTEM_STATUS_TABLE+WAIT_MEM_COUNT] = [SYSTEM_STATUS_TABLE+WAIT_MEM_COUNT] - 1;

    [SYSTEM_STATUS_TABLE+MEM_FREE_COUNT] = [SYSTEM_STATUS_TABLE+MEM_FREE_COUNT] - 1;

    i = 0;
    while(i<NUM_MEM_PAGES)do
    
        if([MEMORY_FREE_LIST+i] == 0)
        then
            [MEMORY_FREE_LIST+i] = 1;
            returnValue = i;
            return;
        
        i = i+1;
        endif;
    endwhile;
    

    breakpoint;
    returnValue = -1;   // This should never happen
    return;
endif;

if(functionNum == RELEASE_PAGE)
then
    alias i R11;
    // arg1 is pageNum
    [MEMORY_FREE_LIST+arg1] = [MEMORY_FREE_LIST+arg1] - 1;

    [SYSTEM_STATUS_TABLE+MEM_FREE_COUNT] = [SYSTEM_STATUS_TABLE+MEM_FREE_COUNT] + 1;

    while(i<MAX_PROC_NUM)
    do
        if([PROCESS_TABLE+i*16+4]==WAIT_MEM)
        then
            [PROCESS_TABLE+i*16+4] = READY;
        endif;
        i=i+1;
    endwhile;

    return;
endif;

