alias PID R5;
alias processTableEntry R6;
alias userSP R7;
alias fileName R8;
alias fileInodeIndex R9;
alias i R10;

alias _virAddr R12;
alias _phyAddr R13;

PID = [SYSTEM_STATUS_TABLE+1];
processTableEntry = PROCESS_TABLE+PID*16;

userSP = SP;

[processTableEntry + 13] = SP;          // UPTR
SP = [processTableEntry + 11]*512 - 1;  // UArePage*512 - 1;
[processTableEntry + 9] = 9;            // MODE = SYSCALL 9

_virAddr = userSP - 4;
call MemTranslate;
fileName = [_phyAddr];

i = 0;
while(i<MAX_FILE_NUM)
do
    if([INODE_TABLE+i*16+1] == fileName)
    then
        break;
    endif;
    i = i+1;
endwhile;

if( (i==MAX_FILE_NUM) || ([INODE_TABLE+i*16+0] != EXEC) )
then
    _virAddr = userSP - 1;
    call MemTranslate;
    [_phyAddr] = -1;

    [processTableEntry + 9] = 0;            // MODE = No Syscall
    SP = [processTableEntry + 13];
    ireturn;
endif;
fileInodeIndex = i;

R1 = EXIT_PROCESS;
R2 = PID;
call PROCESS_MANAGER;

[MEMORY_FREE_LIST + [processTableEntry + 11]] = [MEMORY_FREE_LIST + [processTableEntry + 11]] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

SP = [processTableEntry + 11]*512 - 1;
[processTableEntry + 4] = RUNNING;

// Load library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;


[PTBR+4] = R0;
[PTBR+5] = "0110";
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+6] = R0;
[PTBR+7] = "0110";


// Code
i = 0;
while( (i<[INODE_TABLE+ fileInodeIndex*16 + 2]) && (i<4))
do
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    [PTBR+8+2*i] = R0;
    [PTBR+8+2*i+1] = "0100";

    i = i+1;
endwhile;

// Stack
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";

// Load code
breakpoint;
i = 0;
while (i<= ( [INODE_TABLE+ fileInodeIndex*16 + 2]/PAGE_SIZE ) && (i<4))
do
    R1 = [PTBR+8+2*i];  // Dest page (phy)
    R2 = [INODE_TABLE + fileInodeIndex*16 + 8+i]; // Src page

    loadi(R1, R2);
    i = i+1;
endwhile;

[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;

breakpoint;
[processTableEntry + 9] = 0;            // MODE = No Syscall
ireturn;

MemTranslate:
    // Virtual Page
    R10 = _virAddr/512;
    // Physical Page
    R10 = [PTBR+2*R10];
    _phyAddr = R10*512 + _virAddr % 512;
    return;

