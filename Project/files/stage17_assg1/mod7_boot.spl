// library
loadi(63, 13);
loadi(64, 14);

// init
loadi(65, 7);
loadi(66, 8);

// exhandler
loadi(2,15);
loadi(3,16);

// timer
loadi(4,17);
loadi(5,18);

// console
loadi(8, 21);
loadi(9, 22);

// int 6
loadi(14, 27);
loadi(15, 28);

// int 7
loadi(16, 29);
loadi(17, 30);

// int 9
loadi(20, 33);
loadi(21, 34);

// int 10
loadi(22, 35);
loadi(23, 36);

// mod0: resource manager
loadi(40, 53);
loadi(41, 54);

// mod1: process manager
loadi(42, 55);
loadi(43, 56);

// mod2: memory manager
loadi(44, 57);
loadi(45, 58);

// mod4: device manager
loadi(48, 61);
loadi(49, 62);

// mod5: scheduler
loadi(50, 63);
loadi(51, 64);

// Inode Table
loadi(INODE_TABLE/PAGE_SIZE, 3);
loadi(INODE_TABLE/PAGE_SIZE+1, 4);

///////// Initialize Process Table
R0 = 0;
while(R0<MAX_PROC_NUM) do
    [PROCESS_TABLE + R0*16 + 4] = TERMINATED;
    R0 = R0+1;
endwhile;

[TERMINAL_STATUS_TABLE+0] = 0;

///////// Load init program

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process Table
[PROCESS_TABLE+16+1] = 1;           // PID
[PROCESS_TABLE+16+4] = CREATED;   // STATE
[PROCESS_TABLE+16+11] = 80;         // User Area Page
[PROCESS_TABLE+16+12] = 0;          // KPTR
[PROCESS_TABLE+16+13] = 8*512;      // UPTR
[PROCESS_TABLE+16+14] = PTBR;
[PROCESS_TABLE+16+15] = PTLR;


// MEMORY_FREE_LIST: Initialize
R0 = 0;
while(R0<83)
do
    [MEMORY_FREE_LIST+R0] = 1;
    R0 = R0 + 1;
endwhile;
breakpoint;
while(R0<NUM_MEM_PAGES)
do
    [MEMORY_FREE_LIST+R0] = 0;
    R0 = R0 + 1;
endwhile;

[SYSTEM_STATUS_TABLE+2] = 128-83;   // MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE+3] = 0;        // WAIT_MEM_COUNT

// Push entry point
[76*512] = [65*512 + 1];

return;

